{
  "name": "ct-project",
  "version": "0.0.1-SNAPSHOT",
  "description": "Encuentra el trabajo que siempre has deseado",
  "private": true,
  "license": "UNLICENSED",
  "cacheDirectories": [
    "node_modules"
  ],
  "dependencies": {
    "@angular/animations": "^9.0.4",
    "@angular/cdk": "^9.2.4",
    "@angular/common": "9.0.4",
    "@angular/compiler": "9.0.4",
    "@angular/core": "9.0.4",
    "@angular/forms": "9.0.4",
    "@angular/google-maps": "^9.2.4",
    "@angular/localize": "9.0.4",
    "@angular/material": "^9.2.4",
    "@angular/platform-browser": "9.0.4",
    "@angular/platform-browser-dynamic": "9.0.4",
    "@angular/router": "9.0.4",
    "@fortawesome/angular-fontawesome": "0.6.0",
    "@fortawesome/fontawesome-svg-core": "1.2.26",
    "@fortawesome/free-solid-svg-icons": "5.12.0",
    "@ng-bootstrap/ng-bootstrap": "6.0.0",
    "@ngx-translate/core": "11.0.1",
    "@ngx-translate/http-loader": "4.0.0",
    "@progress/kendo-angular-grid": "4.1.0",
    "@progress/kendo-angular-intl": "2.0.0",
    "@progress/kendo-angular-pdf-export": "2.0.0",
    "@progress/kendo-data-query": "1.5.1",
    "@progress/kendo-drawing": "1.5.12",
    "@sweetalert2/ngx-sweetalert2": "^9.0.0",
    "@types/node-uuid": "0.0.28",
    "@types/pdfkit": "^0.10.5",
    "@types/pdfmake": "^0.1.13",
    "alertifyjs": "^1.13.1",
    "angularx-qrcode": "^2.1.1",
    "aws-sdk": "^2.0.9",
    "bootstrap": "4.4.1",
    "bootswatch": "4.4.1",
    "file-saver": "^2.0.2",
    "html-to-pdfmake": "^2.0.6",
    "html2canvas": "^1.0.0-rc.7",
    "html2pdf.js": "^0.9.2",
    "jspdf": "^2.1.1",
    "jszip": "^3.4.0",
    "moment": "2.24.0",
    "ng-jhipster": "0.12.0",
    "ng2-pdf-viewer": "^6.3.0",
    "ngx-cookie": "4.0.2",
    "ngx-infinite-scroll": "8.0.1",
    "ngx-pagination": "^5.0.0",
    "ngx-webstorage": "5.0.0",
    "node-uuid": "^1.4.8",
    "pdfmake": "^0.1.65",
    "rxjs": "6.5.3",
    "swagger-ui-dist": "3.24.3",
    "sweetalert2": "^10.15.5",
    "tslib": "1.10.0",
    "zone.js": "0.10.2"
  },
  "devDependencies": {
    "@angular/cli": "9.0.4",
    "@angular/compiler-cli": "9.0.4",
    "@ngtools/webpack": "9.0.4",
    "@openapitools/openapi-generator-cli": "1.0.10-4.2.3",
    "@types/file-saver": "^2.0.1",
    "@types/jest": "24.0.23",
    "@types/node": "12.12.17",
    "@typescript-eslint/eslint-plugin": "2.11.0",
    "@typescript-eslint/eslint-plugin-tslint": "2.11.0",
    "@typescript-eslint/parser": "2.11.0",
    "autoprefixer": "9.7.3",
    "base-href-webpack-plugin": "2.0.0",
    "browser-sync": "2.26.7",
    "browser-sync-webpack-plugin": "2.2.2",
    "codelyzer": "5.2.0",
    "copy-webpack-plugin": "5.1.1",
    "css-loader": "3.3.2",
    "eslint": "6.7.2",
    "eslint-config-jhipster": "0.0.1",
    "eslint-config-prettier": "6.7.0",
    "eslint-loader": "3.0.3",
    "file-loader": "5.0.2",
    "friendly-errors-webpack-plugin": "1.7.0",
    "generator-jhipster": "6.8.0",
    "html-loader": "0.5.5",
    "html-webpack-plugin": "3.2.0",
    "husky": "7.0.4",
    "jest": "24.9.0",
    "jest-date-mock": "1.0.7",
    "jest-junit": "10.0.0",
    "jest-preset-angular": "8.0.0",
    "jest-sonar-reporter": "2.0.0",
    "lint-staged": "8.2.1",
    "merge-jsons-webpack-plugin": "1.0.20",
    "mini-css-extract-plugin": "0.8.0",
    "moment-locales-webpack-plugin": "1.1.2",
    "optimize-css-assets-webpack-plugin": "5.0.3",
    "postcss-loader": "3.0.0",
    "prettier": "1.19.1",
    "reflect-metadata": "0.1.13",
    "rimraf": "3.0.0",
    "sass": "1.23.7",
    "sass-loader": "8.0.0",
    "simple-progress-webpack-plugin": "1.1.2",
    "style-loader": "1.0.1",
    "terser-webpack-plugin": "2.3.0",
    "thread-loader": "2.1.3",
    "to-string-loader": "1.1.6",
    "ts-loader": "6.2.1",
    "tslint": "6.0.0",
    "typescript": "3.7.5",
    "webpack": "4.41.2",
    "webpack-bundle-analyzer": "3.6.0",
    "webpack-cli": "3.3.10",
    "webpack-dev-server": "3.9.0",
    "webpack-merge": "4.2.2",
    "webpack-notifier": "1.8.0",
    "workbox-webpack-plugin": "4.3.1",
    "write-file-webpack-plugin": "4.5.1"
  },
  "engines": {
    "node": ">=8.9.0"
  },
  "scripts": {
    "app:start": "./gradlew",
    "backend:build-cache": "npm run backend:info && npm run backend:nohttp:test && npm run ci:e2e:package",
    "backend:doc:test": "./gradlew javadoc -x webapp -x webapp_test",
    "backend:info": "./gradlew -v",
    "backend:nohttp:test": "./gradlew checkstyleNohttp -x webapp -x webapp_test",
    "backend:start": "./gradlew -x webapp -x webapp_test",
    "backend:unit:test": "./gradlew test integrationTest -x webapp -x webapp_test -Dlogging.level.ROOT=OFF -Dlogging.level.org.zalando=OFF -Dlogging.level.tech.jhipster=OFF -Dlogging.level.com.jave.proybaseanggrd=OFF -Dlogging.level.org.springframework=OFF -Dlogging.level.org.springframework.web=OFF -Dlogging.level.org.springframework.security=OFF",
    "build": "npm run webapp:prod --",
    "build-watch": "concurrently 'npm run webapp:build:dev -- --watch' npm:backend:start",
    "ci:backend:test": "npm run backend:info && npm run backend:doc:test && npm run backend:nohttp:test && npm run backend:unit:test -- -P$npm_package_config_default_environment",
    "ci:e2e:package": "npm run java:$npm_package_config_packaging:$npm_package_config_default_environment -- -Pe2e -Denforcer.skip=true",
    "postci:e2e:package": "cp build/libs/*.$npm_package_config_packaging e2e.$npm_package_config_packaging",
    "ci:e2e:prepare": "npm run ci:e2e:prepare:docker",
    "ci:e2e:prepare:docker": "npm run docker:db:up && npm run docker:others:up && docker ps -a",
    "ci:e2e:run": "concurrently -k -s first \"npm run ci:e2e:server:start\" \"npm run e2e:headless\"",
    "preci:e2e:server:start": "npm run docker:db:await --if-present && npm run docker:others:await --if-present",
    "ci:e2e:server:start": "java -jar e2e.$npm_package_config_packaging --spring.profiles.active=e2e,$npm_package_config_default_environment -Dlogging.level.ROOT=OFF -Dlogging.level.org.zalando=OFF -Dlogging.level.tech.jhipster=OFF -Dlogging.level.com.jave.proybaseanggrd=OFF -Dlogging.level.org.springframework=OFF -Dlogging.level.org.springframework.web=OFF -Dlogging.level.org.springframework.security=OFF --logging.level.org.springframework.web=ERROR",
    "ci:e2e:teardown": "npm run ci:e2e:teardown:docker",
    "ci:e2e:teardown:docker": "npm run docker:db:down --if-present && npm run docker:others:down && docker ps -a",
    "ci:frontend:build": "npm run webapp:build:$npm_package_config_default_environment",
    "ci:frontend:test": "npm run ci:frontend:build && npm test",
    "ci:server:await": "echo \"Waiting for server at port $npm_package_config_backend_port to start\" && wait-on -t 180000 http-get://localhost:$npm_package_config_backend_port/management/health && echo \"Server at port $npm_package_config_backend_port started\"",
    "clean-coverage": "rimraf .nyc_output coverage",
    "clean-www": "rimraf build/resources/main/static/app/{src,build/}",
    "cleanup": "rimraf build/resources/main/static/",
    "cypress": "cypress open --e2e",
    "cypress:audits": "cypress open --e2e --config-file cypress-audits.config.js",
    "docker:app:up": "docker-compose -f src/main/docker/app.yml up -d",
    "docker:db:down": "docker-compose -f src/main/docker/postgresql.yml down -v",
    "docker:db:up": "docker-compose -f src/main/docker/postgresql.yml up -d",
    "docker:others:await": "",
    "docker:others:down": "",
    "predocker:others:up": "",
    "docker:others:up": "",
    "e2e": "npm run e2e:cypress:headed --",
    "e2e:cypress": "cypress run --e2e --browser chrome --record ${CYPRESS_ENABLE_RECORD:-false}",
    "e2e:cypress:audits": "cypress run --e2e --browser chrome --record ${CYPRESS_ENABLE_RECORD:-false} --config-file cypress-audits.config.js",
    "e2e:cypress:audits:headless": "npm run e2e:cypress -- --config-file cypress-audits.config.js",
    "pree2e:cypress:coverage": "npm run clean coverage && npm run ci:server:await",
    "e2e:cypress:coverage": "npm run e2e:cypress:headed",
    "poste2e:cypress:coverage": "nyc report",
    "e2e:cypress:headed": "npm run e2e:cypress -- --headed",
    "e2e:dev": "concurrently -k -s first \"./gradlew\" \"npm run e2e\"",
    "e2e:devserver": "concurrently -k -s first \"npm run backend:start\" \"npm start\" \"wait-on -t 180000 http-get://localhost:9000 && npm run e2e:headless -- -c baseUrl=http://localhost:9000\"",
    "pree2e:headless": "npm run ci:server:await",
    "e2e:headless": "npm run e2e:cypress --",
    "java:docker": "./gradlew bootJar -Pprod jibDockerBuild",
    "java:docker:arm64": "npm run java:docker -- -PjibArchitecture=arm64",
    "java:docker:dev": "npm run java:docker -- -Pdev,webapp",
    "java:docker:prod": "npm run java:docker -- -Pprod",
    "java:jar": "./gradlew bootJar -x test -x integrationTest",
    "java:jar:dev": "npm run java:jar -- -Pdev,webapp",
    "java:jar:prod": "npm run java:jar -- -Pprod",
    "java:war": "./gradlew bootWar -Pwar -x test -x integrationTest",
    "java:war:dev": "npm run java:war -- -Pdev,webapp",
    "java:war:prod": "npm run java:war -- -Pprod",
    "jest": "jest --coverage --logHeapUsage --maxWorkers=2 --config jest.conf.js",
    "lint": "eslint . --ext .js,.ts",
    "lint:fix": "npm run lint -- --fix",
    "prepare": "husky install",
    "prettier:check": "prettier --check \"{,src/**/,webpack/}*.{md,json,yml,html,cjs,mjs,js,ts,tsx,css,scss,java}\"",
    "prettier:format": "prettier --write \"{,src/**/,webpack/}*.{md,json,yml,html,cjs,mjs,js,ts,tsx,css,scss,java}\"",
    "serve": "npm run start --",
    "start": "ng serve --hmr",
    "start-tls": "npm run webapp:dev-ssl",
    "pretest": "npm run lint",
    "test": "ng test --coverage --log-heap-usage -w=2",
    "test:watch": "npm run test -- --watch",
    "watch": "concurrently npm:start npm:backend:start",
    "webapp:build": "npm run clean-www && npm run webapp:build:dev",
    "webapp:build:dev": "ng build --configuration development",
    "webapp:build:prod": "ng build --configuration production",
    "webapp:dev": "ng serve",
    "webapp:dev-ssl": "ng serve --ssl",
    "webapp:dev-verbose": "ng serve --verbose",
    "prewebapp:instrumenter": "npm run clean-www && npm run clean-coverage",
    "webapp:instrumenter": "ng build --configuration instrumenter",
    "webapp:prod": "npm run clean-www && npm run webapp:build:prod",
    "webapp:test": "npm run test --"
  },
  "jestSonar": {
    "reportPath": "build/test-results/jest",
    "reportFile": "TESTS-results-sonar.xml"
  }
}
